"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const User_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/User"));
class AuthController {
    async register({ view }) {
        return view.render('auth/register');
    }
    async store({ request, response, auth, session }) {
        const data = request.only(['name', 'email', 'password']);
        console.log(data);
        const users = await User_1.default.query();
        for (const user of users) {
            if (user.email === data.email) {
                session.flash('errors', 'Email já utilizado.');
                return response.redirect().back();
            }
        }
        try {
            const user = await User_1.default.create(data);
            await auth.login(user, true);
        }
        catch (error) {
            session.flash('errors', 'Erro no registro. Verifique suas informações.');
            return response.redirect().toRoute('auth.register');
        }
        response.redirect().toRoute('root');
    }
    async login({ view }) {
        return view.render('auth/login');
    }
    async verify({ request, response, auth }) {
        const data = request.only(['email', 'password', 'remember']);
        await auth.attempt(data.email, data.password, data.remember === 'true');
        response.redirect().toRoute('root');
    }
    async logout({ response, auth }) {
        await auth.logout();
        response.redirect().toRoute('root');
    }
}
exports.default = AuthController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXV0aENvbnRyb2xsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJBdXRoQ29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUVBLGlGQUFrQztBQUVsQyxNQUFxQixjQUFjO0lBQzFCLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBRSxJQUFJLEVBQXVCO1FBQ2pELE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQTtJQUNyQyxDQUFDO0lBRU0sS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBdUI7UUFDMUUsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQTtRQUN4RCxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFBO1FBRWpCLE1BQU0sS0FBSyxHQUFHLE1BQU0sY0FBSSxDQUFDLEtBQUssRUFBRSxDQUFBO1FBQ2hDLEtBQUssTUFBTSxJQUFJLElBQUksS0FBSyxFQUFFO1lBQ3hCLElBQUksSUFBSSxDQUFDLEtBQUssS0FBSyxJQUFJLENBQUMsS0FBSyxFQUFFO2dCQUM3QixPQUFPLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxxQkFBcUIsQ0FBQyxDQUFBO2dCQUM5QyxPQUFPLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQTthQUNsQztTQUNGO1FBRUQsSUFBSTtZQUNGLE1BQU0sSUFBSSxHQUFHLE1BQU0sY0FBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQTtZQUNwQyxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFBO1NBQzdCO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDZCxPQUFPLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSwrQ0FBK0MsQ0FBQyxDQUFBO1lBQ3hFLE9BQU8sUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQTtTQUNwRDtRQUNELFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDckMsQ0FBQztJQUVNLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRSxJQUFJLEVBQXVCO1FBQzlDLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQTtJQUNsQyxDQUFDO0lBRU0sS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUF1QjtRQUNsRSxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFBO1FBQzVELE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsS0FBSyxNQUFNLENBQUMsQ0FBQTtRQUN2RSxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JDLENBQUM7SUFFTSxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBdUI7UUFDekQsTUFBTSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUE7UUFDbkIsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUNyQyxDQUFDO0NBQ0Y7QUF6Q0QsaUNBeUNDIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgcHJldHRpZXIvcHJldHRpZXIgKi9cbmltcG9ydCB7IEh0dHBDb250ZXh0Q29udHJhY3QgfSBmcm9tICdAaW9jOkFkb25pcy9Db3JlL0h0dHBDb250ZXh0J1xuaW1wb3J0IFVzZXIgZnJvbSAnQXBwL01vZGVscy9Vc2VyJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBdXRoQ29udHJvbGxlciB7XG4gIHB1YmxpYyBhc3luYyByZWdpc3Rlcih7IHZpZXcgfTogSHR0cENvbnRleHRDb250cmFjdCkge1xuICAgIHJldHVybiB2aWV3LnJlbmRlcignYXV0aC9yZWdpc3RlcicpXG4gIH1cblxuICBwdWJsaWMgYXN5bmMgc3RvcmUoeyByZXF1ZXN0LCByZXNwb25zZSwgYXV0aCwgc2Vzc2lvbiB9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XG4gICAgY29uc3QgZGF0YSA9IHJlcXVlc3Qub25seShbJ25hbWUnLCAnZW1haWwnLCAncGFzc3dvcmQnXSlcbiAgICBjb25zb2xlLmxvZyhkYXRhKVxuICAgIFxuICAgIGNvbnN0IHVzZXJzID0gYXdhaXQgVXNlci5xdWVyeSgpXG4gICAgZm9yIChjb25zdCB1c2VyIG9mIHVzZXJzKSB7XG4gICAgICBpZiAodXNlci5lbWFpbCA9PT0gZGF0YS5lbWFpbCkge1xuICAgICAgICBzZXNzaW9uLmZsYXNoKCdlcnJvcnMnLCAnRW1haWwgasOhIHV0aWxpemFkby4nKVxuICAgICAgICByZXR1cm4gcmVzcG9uc2UucmVkaXJlY3QoKS5iYWNrKClcbiAgICAgIH0gIFxuICAgIH1cblxuICAgIHRyeSB7ICBcbiAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBVc2VyLmNyZWF0ZShkYXRhKVxuICAgICAgYXdhaXQgYXV0aC5sb2dpbih1c2VyLCB0cnVlKSAgICAgIFxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBzZXNzaW9uLmZsYXNoKCdlcnJvcnMnLCAnRXJybyBubyByZWdpc3Ryby4gVmVyaWZpcXVlIHN1YXMgaW5mb3JtYcOnw7Vlcy4nKVxuICAgICAgcmV0dXJuIHJlc3BvbnNlLnJlZGlyZWN0KCkudG9Sb3V0ZSgnYXV0aC5yZWdpc3RlcicpXG4gICAgfVxuICAgIHJlc3BvbnNlLnJlZGlyZWN0KCkudG9Sb3V0ZSgncm9vdCcpXG4gIH1cblxuICBwdWJsaWMgYXN5bmMgbG9naW4oeyB2aWV3IH06IEh0dHBDb250ZXh0Q29udHJhY3QpIHtcbiAgICByZXR1cm4gdmlldy5yZW5kZXIoJ2F1dGgvbG9naW4nKVxuICB9XG5cbiAgcHVibGljIGFzeW5jIHZlcmlmeSh7IHJlcXVlc3QsIHJlc3BvbnNlLCBhdXRoIH06IEh0dHBDb250ZXh0Q29udHJhY3QpIHtcbiAgICBjb25zdCBkYXRhID0gcmVxdWVzdC5vbmx5KFsnZW1haWwnLCAncGFzc3dvcmQnLCAncmVtZW1iZXInXSlcbiAgICBhd2FpdCBhdXRoLmF0dGVtcHQoZGF0YS5lbWFpbCwgZGF0YS5wYXNzd29yZCwgZGF0YS5yZW1lbWJlciA9PT0gJ3RydWUnKVxuICAgIHJlc3BvbnNlLnJlZGlyZWN0KCkudG9Sb3V0ZSgncm9vdCcpXG4gIH1cblxuICBwdWJsaWMgYXN5bmMgbG9nb3V0KHsgcmVzcG9uc2UsIGF1dGggfTogSHR0cENvbnRleHRDb250cmFjdCkge1xuICAgIGF3YWl0IGF1dGgubG9nb3V0KClcbiAgICByZXNwb25zZS5yZWRpcmVjdCgpLnRvUm91dGUoJ3Jvb3QnKVxuICB9XG59XG4iXX0=